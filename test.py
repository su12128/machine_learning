import numpy
import matplotlib.pyplot as plt


def percentiles():
    '''
    什么是百分位数？
        统计学中使用百分位数（Percentiles）为您提供一个数字，该数字描述了给定百分比值小于的值。

        例如：假设我们有一个数组，包含住在一条街上的人的年龄。
        ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]
        什么是 75 百分位数？答案是 43，这意味着 75％ 的人是 43 岁或以下。
        (将数组进行排序，75%位置对应的是43)

        NumPy 模块有一种用于找到指定百分位数的方法：
            使用 NumPy percentile() 方法查找百分位数
    '''

    ages = [5, 31, 43, 48, 50, 41, 7, 11, 15, 39,
            80, 82, 32, 2, 8, 6, 25, 36, 27, 61, 31]

    x = numpy.percentile(ages, 75)

    print(x)


def get_random_list():
    '''创建一个包含 250 个介于 0 到 5 之间的随机浮点数的数组'''
    x = numpy.random.uniform(0.0, 5.0, 250)
    print(x)


def show_pyplot():
    '''
    绘制直方图
    我们使用上例中的数组绘制 5 条柱状图。

    第一栏代表数组中有多少 0 到 1 之间的值。

    第二栏代表有多少 1 到 2 之间的数值。
    '''
    import matplotlib.pyplot as plt

    x = numpy.random.uniform(0.0, 5.0, 250)

    plt.hist(x, 5)
    plt.show()


def show_normal():
    '''

    我们使用 numpy.random.normal() 方法创建的数组（具有 100000 个值）绘制具有 100 栏的直方图。

    我们指定平均值为 5.0，标准差为 1.0。

    这意味着这些值应集中在 5.0 左右，并且很少与平均值偏离 1.0。

    从直方图中可以看到，大多数值都在 4.0 到 6.0 之间，最高值大约是 5.0。
    '''
    x = numpy.random.normal(5.0, 1.0, 100000)

    plt.hist(x, 100)
    plt.show()


def show_scatter():
    '''
    散点图
    Matplotlib 模块有一种绘制散点图的方法，它需要两个长度相同的数组，一个数组用于 x 轴的值，另一个数组用于 y 轴的值：
    '''
    x = [5, 7, 8, 7, 2, 17, 2, 9, 4, 11, 12, 9, 6]
    y = [99, 86, 87, 88, 111, 86, 103, 87, 94, 78, 77, 85, 86]

    plt.scatter(x, y)
    plt.show()


def show_scipy_line():
    '''
    线性回归
    Python 提供了一些方法来查找数据点之间的关系并绘制线性回归线。我们将向您展示如何使用这些方法而不是通过数学公式。

    在下面的示例中，x 轴表示车龄，y 轴表示速度。我们已经记录了 13 辆汽车通过收费站时的车龄和速度。让我们看看我们收集的数据是否可以用于线性回归：
    '''

    from scipy import stats

    x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
    y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

    slope, intercept, r, p, std_err = stats.linregress(x, y)
    
    # r表示数据间的线性拟合度，范围是0-1，越接近1表示拟合度越好，为1表示100%线性拟合，就是条线性线
    print(f'线性拟合度为：{r}')

    def myfunc(x):
        return slope * x + intercept
    # 通过函数运行 x 数组的每个值。这将产生一个新的数组，其中的 y 轴具有新值：
    mymodel = list(map(myfunc, x))
    # 散点图
    plt.scatter(x, y)
    # 绘制线性回归线：
    plt.plot(x, mymodel)
    plt.show()


def show_polynomialra_regression():
    '''
        多项式回归
        如果数据点显然不适合线性回归（穿过数据点之间的直线），那么多项式回归可能是理想的选择。

        像线性回归一样，多项式回归使用变量 x 和 y 之间的关系来找到绘制数据点线的最佳方法。
        Python 有一些方法可以找到数据点之间的关系并画出多项式回归线。我们将向您展示如何使用这些方法而不是通过数学公式。

        在下面的例子中，我们注册了 18 辆经过特定收费站的汽车。

        我们已经记录了汽车的速度和通过时间（小时）。

        x 轴表示一天中的小时，y 轴表示速度：

    '''

    x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]
    y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]

    plt.scatter(x, y)
    plt.show()

if __name__ == '__main__':
    show_polynomialra_regression()
